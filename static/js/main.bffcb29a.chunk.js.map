{"version":3,"sources":["components/Nav.js","components/Body.js","components/Card.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","score","topscore","Body","Card","characters","map","item","src","image","alt","data-id","key","onClick","Footer","cards","selectedCards","App","state","onCardClick","event","id","target","attributes","getNamedItem","value","includes","console","log","push","array","i","length","j","Math","floor","random","temp","shuffleArray","components_Nav","components_Body","components_Card","this","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bffcb29a.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\n\nfunction Nav(props) {\n    return (\n        <nav className='navbar'>\n            <a className='navbar-text' href='/'>Clicky Game</a>\n            <span className='message navbar-text'>Click an image to begin!</span>\n            <span className='navbar-text' score={ props.score } topscore={ props.topscore }>\n                <p className='my-auto'>Score: { props.score } | Top Score: { props.topscore }</p>\n            </span>\n        </nav>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport './Body.css';\n\nfunction Body() {\n    return (\n        <div>\n            <div>\n                <header className='header'>\n                    <h1>Clicky Game!</h1>\n                    <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n                </header>\n            </div>\n        </div>\n    )\n}\n\nexport default Body;","import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n    return (\n        <div className='card-container'>\n            {props.characters.map((item) => (\n                <img className='card-image' src={item.image} alt=\"\" data-id={item.key} key={item.key} onClick={props.onClick}></img>\n            ))}\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n    return (\n        <footer>\n            <div className='footer-content'>\n                <p className='footer-text my-auto mr-2'>Clicky Game!</p>\n                <img className='react-logo' alt='react logo' src=\"https://cdn4.iconfinder.com/data/icons/logos-3/600/React.js_logo-512.png\"></img>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport './App.css';\nimport Nav from './components/Nav';\nimport Body from './components/Body';\nimport Card from \"./components/Card\";\nimport Footer from './components/Footer';\n\nlet score = 0;\nlet topscore = 0;\nlet cards = [\n  {\n    key: 1,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/april.jpg',\n  },\n  {\n    key: 2,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/bebop.jpg',\n  },\n  {\n    key: 3,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/caseyjones.jpg',\n  },\n  {\n    key: 4,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/donatello.jpg',\n  },\n  {\n    key: 5,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/foot.jpg',\n  },\n  {\n    key: 6,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/krang.jpg',\n  },\n  {\n    key: 7,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/leonardo.jpg',\n  },\n  {\n    key: 8,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/michelangelo.jpg',\n  },\n  {\n    key: 9,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/raphael.jpg',\n  },\n  {\n    key: 10,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/rocksteady.jpg',\n  },\n  {\n    key: 11,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/shredder.jpg',\n  },\n  {\n    key: 12,\n    image: 'https://raw.githubusercontent.com/shawnholcomb/click-game/master/public/assets/images/splinter.jpg',\n  }\n]\n\nlet selectedCards = []\n\nclass App extends Component {\n  state = {\n    cards,\n    score,\n    topscore\n  };\n\n  onCardClick = event => {\n    let id = event.target.attributes.getNamedItem('data-id').value;\n\n    function startGame() {\n      if (!selectedCards.includes(id)) {\n        console.log(\"new \" + id)\n        selectedCards.push(id);\n        score++;\n      } else {\n        console.log(\"already picked \" + id)\n        if (score > topscore) {\n          topscore = score\n        };\n        score = 0;\n        selectedCards = [];\n      }\n      console.log(selectedCards, score, topscore)\n    }\n\n    function shuffleArray(array) {\n      for (var i = array.length - 1; i > 0; i--) {\n          var j = Math.floor(Math.random() * (i + 1));\n          var temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n      }\n  }\n\n    startGame()\n    shuffleArray(cards);\n    console.log(cards)\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav score={score} topscore={topscore} />\n        <Body />\n        <Card characters={this.state.cards} onClick={this.onCardClick} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}